"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("./constants");
function joinPaths(basePath, path) {
    function forceLeadingSlash(path) {
        return path.startsWith('/') ? path : `/${path}`;
    }
    function stripTrailingSlash(path) {
        return path.endsWith('/') ? path.slice(0, path.length - 1) : path;
    }
    const sanitizePathComponent = (path) => stripTrailingSlash(forceLeadingSlash(path));
    const joinedPath = `${sanitizePathComponent(basePath)}${sanitizePathComponent(path)}`;
    return joinedPath.length === 0 ? '/' : joinedPath;
}
function buildRouteData(controller) {
    const { basePath, middlewares: baseMiddlewares } = Reflect.getMetadata(constants_1.CONTROLLER_ROUTE_METADATA_STORAGE, controller);
    const routesMetadata = Reflect.getMetadata(constants_1.METHOD_ROUTE_METADATA_STORAGE, controller);
    return Object.entries(routesMetadata).map(([fnName, { method, path, middlewares }]) => ({
        method,
        fnName,
        path: joinPaths(basePath, path),
        middlewares: baseMiddlewares.concat(middlewares)
    }));
}
function matchRequestTypeToMethod(app, method) {
    switch (method) {
        case 'get': return app.get.bind(app);
        case 'put': return app.put.bind(app);
        case 'patch': return app.patch.bind(app);
        case 'post': return app.post.bind(app);
        case 'delete': return app.delete.bind(app);
        case 'all': return app.use.bind(app);
    }
}
function registerRoutes(app, controllers) {
    controllers.forEach(controller => {
        const controllerRouteData = buildRouteData(controller);
        const instance = new controller();
        controllerRouteData.forEach(({ method, path, fnName, middlewares }) => {
            const registrationMethod = matchRequestTypeToMethod(app, method);
            const middlewareChain = [...middlewares, instance[fnName].bind(instance)];
            console.log(`Registering route ${method.toUpperCase()} ${path}`);
            registrationMethod(path, middlewareChain);
        });
    });
}
exports.registerRoutes = registerRoutes;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3JvdXRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLDJDQUErRjtBQWEvRixTQUFTLFNBQVMsQ0FBQyxRQUFnQixFQUFFLElBQVk7SUFDL0MsU0FBUyxpQkFBaUIsQ0FBQyxJQUFZO1FBQ3JDLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDO0lBQ2xELENBQUM7SUFFRCxTQUFTLGtCQUFrQixDQUFDLElBQVk7UUFDdEMsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDcEUsQ0FBQztJQUVELE1BQU0scUJBQXFCLEdBQUcsQ0FBQyxJQUFZLEVBQUUsRUFBRSxDQUFDLGtCQUFrQixDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDNUYsTUFBTSxVQUFVLEdBQUcsR0FBRyxxQkFBcUIsQ0FBQyxRQUFRLENBQUMsR0FBRyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO0lBRXRGLE9BQU8sVUFBVSxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFBO0FBQ25ELENBQUM7QUFFRCxTQUFTLGNBQWMsQ0FBQyxVQUFnQjtJQUN0QyxNQUFNLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxlQUFlLEVBQUUsR0FBNEIsT0FBTyxDQUFDLFdBQVcsQ0FBQyw2Q0FBaUMsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUMvSSxNQUFNLGNBQWMsR0FBd0IsT0FBTyxDQUFDLFdBQVcsQ0FBQyx5Q0FBNkIsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUUzRyxPQUFPLE1BQU0sQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDckYsTUFBTTtRQUNOLE1BQU07UUFDTixJQUFJLEVBQUUsU0FBUyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUM7UUFDL0IsV0FBVyxFQUFFLGVBQWUsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDO0tBQ2pELENBQUMsQ0FBQyxDQUFDO0FBQ04sQ0FBQztBQUVELFNBQVMsd0JBQXdCLENBQUMsR0FBd0IsRUFBRSxNQUFxQjtJQUMvRSxRQUFPLE1BQU0sRUFBRTtRQUNiLEtBQUssS0FBSyxDQUFDLENBQUMsT0FBTyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNyQyxLQUFLLEtBQUssQ0FBQyxDQUFDLE9BQU8sR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDckMsS0FBSyxPQUFPLENBQUMsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3pDLEtBQUssTUFBTSxDQUFDLENBQUMsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN2QyxLQUFLLFFBQVEsQ0FBQyxDQUFDLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDM0MsS0FBSyxLQUFLLENBQUMsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ3RDO0FBQ0gsQ0FBQztBQUVELFNBQWdCLGNBQWMsQ0FBQyxHQUF3QixFQUFFLFdBQW1CO0lBQzFFLFdBQVcsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEVBQUU7UUFDL0IsTUFBTSxtQkFBbUIsR0FBRyxjQUFjLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDdkQsTUFBTSxRQUFRLEdBQUcsSUFBSSxVQUFVLEVBQUUsQ0FBQztRQUVsQyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxFQUFFLEVBQUU7WUFDcEUsTUFBTSxrQkFBa0IsR0FBRyx3QkFBd0IsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDakUsTUFBTSxlQUFlLEdBQTZCLENBQUMsR0FBRyxXQUFXLEVBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBYyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBRWxILE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLE1BQU0sQ0FBQyxXQUFXLEVBQUUsSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1lBQ2pFLGtCQUFrQixDQUFDLElBQUksRUFBRSxlQUFlLENBQUMsQ0FBQztRQUM1QyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQWJELHdDQWFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZXhwcmVzcyBmcm9tICdleHByZXNzJztcbmltcG9ydCB7IENPTlRST0xMRVJfUk9VVEVfTUVUQURBVEFfU1RPUkFHRSwgTUVUSE9EX1JPVVRFX01FVEFEQVRBX1NUT1JBR0UgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBDb250cm9sbGVyUm91dGVNZXRhZGF0YSB9IGZyb20gJy4vZGVjb3JhdG9ycy9Db250cm9sbGVyJztcbmltcG9ydCB7IE1ldGhvZFJvdXRlTWV0YWRhdGEsIFJlcXVlc3RNZXRob2QgfSBmcm9tICcuL2RlY29yYXRvcnMvUm91dGUnO1xuXG5leHBvcnQgdHlwZSBDdG9yPFQgPSBhbnk+ID0gbmV3KC4uLmFyZ3M6IGFueVtdKSA9PiBUO1xuXG5leHBvcnQgaW50ZXJmYWNlIFJvdXRlRGF0YSB7XG4gIG1ldGhvZDogUmVxdWVzdE1ldGhvZDtcbiAgZm5OYW1lOiBzdHJpbmc7XG4gIHBhdGg6IHN0cmluZztcbiAgbWlkZGxld2FyZXM6IEZ1bmN0aW9uW11cbn0gXG5cbmZ1bmN0aW9uIGpvaW5QYXRocyhiYXNlUGF0aDogc3RyaW5nLCBwYXRoOiBzdHJpbmcpIHtcbiAgZnVuY3Rpb24gZm9yY2VMZWFkaW5nU2xhc2gocGF0aDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHBhdGguc3RhcnRzV2l0aCgnLycpID8gcGF0aCA6IGAvJHtwYXRofWA7IFxuICB9XG5cbiAgZnVuY3Rpb24gc3RyaXBUcmFpbGluZ1NsYXNoKHBhdGg6IHN0cmluZykge1xuICAgIHJldHVybiBwYXRoLmVuZHNXaXRoKCcvJykgPyBwYXRoLnNsaWNlKDAsIHBhdGgubGVuZ3RoIC0gMSkgOiBwYXRoO1xuICB9XG5cbiAgY29uc3Qgc2FuaXRpemVQYXRoQ29tcG9uZW50ID0gKHBhdGg6IHN0cmluZykgPT4gc3RyaXBUcmFpbGluZ1NsYXNoKGZvcmNlTGVhZGluZ1NsYXNoKHBhdGgpKTtcbiAgY29uc3Qgam9pbmVkUGF0aCA9IGAke3Nhbml0aXplUGF0aENvbXBvbmVudChiYXNlUGF0aCl9JHtzYW5pdGl6ZVBhdGhDb21wb25lbnQocGF0aCl9YDtcblxuICByZXR1cm4gam9pbmVkUGF0aC5sZW5ndGggPT09IDAgPyAnLycgOiBqb2luZWRQYXRoXG59XG5cbmZ1bmN0aW9uIGJ1aWxkUm91dGVEYXRhKGNvbnRyb2xsZXI6IEN0b3IpOiBSb3V0ZURhdGFbXSB7XG4gIGNvbnN0IHsgYmFzZVBhdGgsIG1pZGRsZXdhcmVzOiBiYXNlTWlkZGxld2FyZXMgfTogQ29udHJvbGxlclJvdXRlTWV0YWRhdGEgPSBSZWZsZWN0LmdldE1ldGFkYXRhKENPTlRST0xMRVJfUk9VVEVfTUVUQURBVEFfU1RPUkFHRSwgY29udHJvbGxlcik7XG4gIGNvbnN0IHJvdXRlc01ldGFkYXRhOiBNZXRob2RSb3V0ZU1ldGFkYXRhID0gUmVmbGVjdC5nZXRNZXRhZGF0YShNRVRIT0RfUk9VVEVfTUVUQURBVEFfU1RPUkFHRSwgY29udHJvbGxlcik7XG5cbiAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHJvdXRlc01ldGFkYXRhKS5tYXAoKFtmbk5hbWUsIHsgbWV0aG9kLCBwYXRoLCBtaWRkbGV3YXJlc31dKSA9PiAoe1xuICAgIG1ldGhvZCxcbiAgICBmbk5hbWUsXG4gICAgcGF0aDogam9pblBhdGhzKGJhc2VQYXRoLCBwYXRoKSxcbiAgICBtaWRkbGV3YXJlczogYmFzZU1pZGRsZXdhcmVzLmNvbmNhdChtaWRkbGV3YXJlcylcbiAgfSkpO1xufVxuXG5mdW5jdGlvbiBtYXRjaFJlcXVlc3RUeXBlVG9NZXRob2QoYXBwOiBleHByZXNzLkFwcGxpY2F0aW9uLCBtZXRob2Q6IFJlcXVlc3RNZXRob2QpOiBleHByZXNzLklSb3V0ZXJNYXRjaGVyPGV4cHJlc3MuQXBwbGljYXRpb24+IHtcbiAgc3dpdGNoKG1ldGhvZCkge1xuICAgIGNhc2UgJ2dldCc6IHJldHVybiBhcHAuZ2V0LmJpbmQoYXBwKTtcbiAgICBjYXNlICdwdXQnOiByZXR1cm4gYXBwLnB1dC5iaW5kKGFwcCk7XG4gICAgY2FzZSAncGF0Y2gnOiByZXR1cm4gYXBwLnBhdGNoLmJpbmQoYXBwKTtcbiAgICBjYXNlICdwb3N0JzogcmV0dXJuIGFwcC5wb3N0LmJpbmQoYXBwKTtcbiAgICBjYXNlICdkZWxldGUnOiByZXR1cm4gYXBwLmRlbGV0ZS5iaW5kKGFwcCk7XG4gICAgY2FzZSAnYWxsJzogcmV0dXJuIGFwcC51c2UuYmluZChhcHApO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlclJvdXRlcyhhcHA6IGV4cHJlc3MuQXBwbGljYXRpb24sIGNvbnRyb2xsZXJzOiBDdG9yW10pIHtcbiAgY29udHJvbGxlcnMuZm9yRWFjaChjb250cm9sbGVyID0+IHtcbiAgICBjb25zdCBjb250cm9sbGVyUm91dGVEYXRhID0gYnVpbGRSb3V0ZURhdGEoY29udHJvbGxlcik7XG4gICAgY29uc3QgaW5zdGFuY2UgPSBuZXcgY29udHJvbGxlcigpO1xuXG4gICAgY29udHJvbGxlclJvdXRlRGF0YS5mb3JFYWNoKCh7IG1ldGhvZCwgcGF0aCwgZm5OYW1lLCBtaWRkbGV3YXJlcyB9KSA9PiB7XG4gICAgICBjb25zdCByZWdpc3RyYXRpb25NZXRob2QgPSBtYXRjaFJlcXVlc3RUeXBlVG9NZXRob2QoYXBwLCBtZXRob2QpO1xuICAgICAgY29uc3QgbWlkZGxld2FyZUNoYWluOiBleHByZXNzLlJlcXVlc3RIYW5kbGVyW10gPSBbLi4ubWlkZGxld2FyZXMsIChpbnN0YW5jZVtmbk5hbWVdIGFzIEZ1bmN0aW9uKS5iaW5kKGluc3RhbmNlKV07XG5cbiAgICAgIGNvbnNvbGUubG9nKGBSZWdpc3RlcmluZyByb3V0ZSAke21ldGhvZC50b1VwcGVyQ2FzZSgpfSAke3BhdGh9YCk7XG4gICAgICByZWdpc3RyYXRpb25NZXRob2QocGF0aCwgbWlkZGxld2FyZUNoYWluKTtcbiAgICB9KTtcbiAgfSk7XG59XG4iXX0=